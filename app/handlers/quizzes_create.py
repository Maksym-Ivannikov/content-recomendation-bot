from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.fsm.states import CreateQuiz
from app.keyboards import categories_kb
from app.db import async_session
from app.repositories import create_quiz, add_question, upsert_user, list_quizzes_by_type
from sqlalchemy import select
from app.models import Quizzes

router = Router()


# --- 1Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–≤—ñ–∑—É ---
@router.message(F.text == "/create_quiz")
async def create_quiz_entry(message: Message, state: FSMContext):
    if message.chat.type in ("group", "supergroup"):
        await message.answer("üì© –Ø –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–æ–±—ñ –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–≤—ñ–∑—É.")
        await message.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–≤—ñ–∑—É:")
    else:
        await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–≤—ñ–∑—É:")
    await state.set_state(CreateQuiz.ask_title)


@router.message(CreateQuiz.ask_title)
async def cq_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await message.answer("–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb("cq"))
    await state.set_state(CreateQuiz.ask_type)


@router.callback_query(F.data.startswith("cq:cat:"))
async def cq_type(cb: CallbackQuery, state: FSMContext):
    _, _, type_ = cb.data.split(":")
    await state.update_data(type=type_)
    await cb.message.edit_text("–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏, –Ω–∞–¥—ñ—à–ª–∏ '-'):")
    await state.set_state(CreateQuiz.ask_desc)
    await cb.answer()


@router.message(CreateQuiz.ask_desc)
async def cq_desc(message: Message, state: FSMContext):
    desc = None if message.text.strip() == "-" else message.text.strip()
    data = await state.get_data()

    async with async_session() as db:
        await upsert_user(db, message.from_user.id, message.from_user.username, message.from_user.first_name)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∫–≤—ñ–∑
        quiz = await create_quiz(db, data["title"], data["type"], desc, message.from_user.id)

    await state.update_data(quiz_id=quiz.id)
    await message.answer("‚úÖ –ö–≤—ñ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–æ. –î–æ–¥–∞–º–æ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è.\n–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è:")
    await state.set_state(CreateQuiz.q_text)


# --- 2Ô∏è‚É£ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è –¥–æ –Ü–°–ù–£–Æ–ß–û–ì–û –∫–≤—ñ–∑—É ---
@router.message(F.text == "/add_question")
async def aq_entry(message: Message, state: FSMContext):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–≤—ñ–∑—É, –¥–æ —è–∫–æ–≥–æ —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=categories_kb("aq"))
    await state.set_state(CreateQuiz.choose_type)


@router.callback_query(F.data.startswith("aq:cat:"))
async def aq_choose_quiz(cb: CallbackQuery, state: FSMContext):
    _, _, type_ = cb.data.split(":")
    async with async_session() as db:
        quizzes = await list_quizzes_by_type(db, type_)
    if not quizzes:
        await cb.message.edit_text("‚ùå –£ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —â–µ –Ω–µ–º–∞—î –∫–≤—ñ–∑—ñ–≤.")
        await state.clear()
        await cb.answer()
        return

    # —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∑—ñ —Å–ø–∏—Å–∫–æ–º –∫–≤—ñ–∑—ñ–≤
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=q.title[:40], callback_data=f"aq:quiz:{q.id}")]
            for q in quizzes[:10]
        ]
    )
    await cb.message.edit_text(f"–û–±–µ—Ä—ñ—Ç—å –∫–≤—ñ–∑ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ({type_}):", reply_markup=kb)
    await state.update_data(type=type_)
    await cb.answer()


@router.callback_query(F.data.startswith("aq:quiz:"))
async def aq_selected_quiz(cb: CallbackQuery, state: FSMContext):
    _, _, quiz_id = cb.data.split(":")
    await state.update_data(quiz_id=int(quiz_id))
    await cb.message.edit_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è:")
    await state.set_state(CreateQuiz.q_text)
    await cb.answer()


# --- 3Ô∏è‚É£ /finish —É –±—É–¥—å-—è–∫–æ–º—É —Å—Ç–∞–Ω—ñ ---
@router.message(F.text.regexp(r"^/(finish|done|–≥–æ—Ç–æ–≤–æ)(@.+)?$"))
async def cq_finish(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state and current_state.startswith("CreateQuiz"):
        await message.answer("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–æ–Ω–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")
        await state.clear()


# --- 4Ô∏è‚É£ –õ–æ–≥—ñ–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å (—Å–ø—ñ–ª—å–Ω–∞ –¥–ª—è –æ–±–æ—Ö —Ä–µ–∂–∏–º—ñ–≤) ---
@router.message(CreateQuiz.q_text, ~F.text.startswith("/"))
async def cq_q_text(message: Message, state: FSMContext):
    await state.update_data(q_text=message.text.strip())
    await message.answer("–í–∞—Ä—ñ–∞–Ω—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–ê,–ë,–í):")
    await state.set_state(CreateQuiz.q_options)


@router.message(CreateQuiz.q_options, ~F.text.startswith("/"))
async def cq_q_options(message: Message, state: FSMContext):
    parts = [p.strip() for p in message.text.split(",")]
    if len(parts) < 3:
        await message.answer("–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ (–ê,–ë,–í):")
        return
    await state.update_data(optA=parts[0], optB=parts[1], optC=parts[2])
    await message.answer("–Ø–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å? (–ê/–ë/–í)")
    await state.set_state(CreateQuiz.q_correct)


@router.message(CreateQuiz.q_correct, ~F.text.startswith("/"))
async def cq_q_correct(message: Message, state: FSMContext):
    correct = message.text.strip().upper()
    if correct not in ("–ê", "–ë", "–í"):
        await message.answer("–í–∫–∞–∂–∏ –ê/–ë/–í:")
        return

    data = await state.get_data()
    async with async_session() as db:
        await add_question(
            db,
            quiz_id=data["quiz_id"],
            text_=data["q_text"],
            a=data["optA"],
            b=data["optB"],
            c=data["optC"],
            correct=correct,
            created_by=message.from_user.id,
            is_approved=False
        )

    await message.answer(
        "‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é.\n"
        "–î–æ–¥–∞—Ç–∏ —â–µ? –ù–∞–¥—ñ—à–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ /finish, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏."
    )
    await state.set_state(CreateQuiz.q_text)
