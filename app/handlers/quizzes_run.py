import random
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.fsm.states import RunQuiz
from app.keyboards import categories_kb
from app.db import async_session
from app.repositories import (
    list_quizzes_by_type,
    list_approved_questions,
    save_quiz_result,
    upsert_user,
)
from app.models import Questions

router = Router()


# --- –∑–∞–ø—É—Å–∫ –∫–≤—ñ–∑—É ---
@router.message(F.text == "/quiz")
async def quiz_entry(message: Message, state: FSMContext):
    if message.chat.type in ("group", "supergroup"):
        await message.answer("üì© –ù–∞–¥—ñ—Å–ª–∞–≤ –∫–≤—ñ–∑ —É –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
        await message.bot.send_message(
            message.from_user.id, "–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–≤—ñ–∑—É:", reply_markup=categories_kb("rq")
        )
    else:
        await message.answer("–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–≤—ñ–∑—É:", reply_markup=categories_kb("rq"))
    await state.set_state(RunQuiz.choose_cat)


# --- –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ---
@router.callback_query(F.data.startswith("rq:cat:"))
async def rq_pick_category(cb: CallbackQuery, state: FSMContext):
    _, _, cat = cb.data.split(":")
    async with async_session() as db:
        quizzes = await list_quizzes_by_type(db, cat)
    if not quizzes:
        await cb.message.edit_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∫–≤—ñ–∑—ñ–≤ —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
        await cb.answer()
        return

    text = "–û–±–µ—Ä—ñ—Ç—å –∫–≤—ñ–∑, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –π–æ–≥–æ –Ω–æ–º–µ—Ä:\n\n"
    for i, q in enumerate(quizzes[:10], start=1):
        text += f"{i}) {q.title}\n"
    await cb.message.edit_text(text + "\n–í—ñ–¥–ø—Ä–∞–≤ —Ü–∏—Ñ—Ä—É (1-10) –æ–±—Ä–∞–Ω–æ–≥–æ –∫–≤—ñ–∑—É.")
    await state.update_data(cat=cat, quiz_ids=[q.id for q in quizzes[:10]])
    await state.set_state(RunQuiz.choose_quiz)
    await cb.answer()


# --- –≤–∏–±—ñ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–≤—ñ–∑—É ---
@router.message(RunQuiz.choose_quiz)
async def rq_choose_quiz(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        idx = int(message.text.strip()) - 1
    except ValueError:
        await message.answer("–ù–∞–¥—ñ—à–ª–∏ –Ω–æ–º–µ—Ä –∫–≤—ñ–∑—É —Ü–∏—Ñ—Ä–æ—é.")
        return

    quiz_ids = data["quiz_ids"]
    if idx < 0 or idx >= len(quiz_ids):
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä. –°–ø—Ä–æ–±—É–π —â–µ.")
        return

    quiz_id = quiz_ids[idx]
    async with async_session() as db:
        qs = await list_approved_questions(db, quiz_id)

    if len(qs) == 0:
        await message.answer("–£ —Ü—å–æ–≥–æ –∫–≤—ñ–∑—É –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å.")
        await state.clear()
        return

    random.shuffle(qs)
    qs = qs[:20] if len(qs) > 20 else qs
    await state.update_data(quiz_id=quiz_id, questions=[q.id for q in qs], idx=0, score=0)

    q = qs[0]
    body = (
        f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è 1/{len(qs)}\n\n"
        f"{q.text}\n"
        f"–ê) {q.option_a}\n–ë) {q.option_b}\n–í) {q.option_c}"
    )

    # –Ω–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–∏—Ä–∏–ª–∏—á–Ω–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    for opt in ("–ê", "–ë", "–í"):
        kb.button(text=opt, callback_data=f"rq:ans:{quiz_id}:{q.id}:{opt}")
    kb.adjust(3)

    await message.answer(body, reply_markup=kb.as_markup())
    await state.set_state(RunQuiz.answering)


# --- –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ---
@router.callback_query(F.data.startswith("rq:ans:"))
async def rq_answer(cb: CallbackQuery, state: FSMContext):
    _, _, quiz_id, qid, chosen = cb.data.split(":")
    quiz_id = int(quiz_id)
    qid = int(qid)

    data = await state.get_data()
    if data.get("quiz_id") != quiz_id:
        await cb.answer("–¶–µ –Ω–µ —Ç–≤—ñ–π –∞–∫—Ç–∏–≤–Ω–∏–π –∫–≤—ñ–∑.", show_alert=True)
        return

    async with async_session() as db:
        q = await db.get(Questions, qid)

    if not q:
        await cb.answer("–ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    score = data.get("score", 0)
    total_q = len(data["questions"])

    if chosen == q.correct_option:
        score += 1

    idx = data["idx"] + 1

    # –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    if idx >= total_q:
        async with async_session() as db:
            await upsert_user(db, cb.from_user.id, cb.from_user.username, cb.from_user.first_name)
            await save_quiz_result(db, cb.from_user.id, cb.from_user.username, quiz_id, score, total_q)
        percent = round(100 * score / total_q)
        await cb.message.edit_text(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total_q} ({percent}%)")
        await state.clear()
        await cb.answer()
        return

    # –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
    async with async_session() as db:
        next_q = await db.get(Questions, data["questions"][idx])

    body = (
        f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è {idx+1}/{total_q}\n\n"
        f"{next_q.text}\n"
        f"–ê) {next_q.option_a}\n–ë) {next_q.option_b}\n–í) {next_q.option_c}"
    )

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    for opt in ("–ê", "–ë", "–í"):
        kb.button(text=opt, callback_data=f"rq:ans:{quiz_id}:{next_q.id}:{opt}")
    kb.adjust(3)

    await state.update_data(idx=idx, score=score)
    await cb.message.edit_text(body, reply_markup=kb.as_markup())
    await cb.answer()
