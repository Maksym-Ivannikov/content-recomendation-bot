from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.fsm.states import CreateRec
from app.keyboards import rec_type_kb
from app.config import settings
from app.db import async_session
from app.repositories import add_recommendation, list_recommendations, upsert_user

router = Router()


@router.message(F.text == "/create_rec")
async def create_rec_entry(message: Message, state: FSMContext):
    # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –∑ –≥—Ä—É–ø–∏ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if message.chat.type in ("group", "supergroup"):
        await message.answer("üì© –Ø –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–æ–±—ñ –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.")
        await message.bot.send_message(
            message.from_user.id,
            "–û–±–µ—Ä–∏ —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:",
            reply_markup=rec_type_kb()
        )
    else:
        await message.answer("–û–±–µ—Ä–∏ —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:", reply_markup=rec_type_kb())

    await state.set_state(CreateRec.choose_type)


@router.callback_query(F.data.startswith("rec:type:"))
async def rec_chosen_type(cb: CallbackQuery, state: FSMContext):
    if cb.message.chat.type != "private":
        return  # FSM –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ —É –ø—Ä–∏–≤–∞—Ç—ñ

    _, _, type_ = cb.data.split(":")
    await state.update_data(rec_type=type_)
    await cb.message.edit_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É:")
    await state.set_state(CreateRec.ask_title)
    await cb.answer()


@router.message(CreateRec.ask_title)
async def rec_ask_desc(message: Message, state: FSMContext):
    if message.chat.type != "private":
        return  # FSM —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É

    await state.update_data(title=message.text.strip())
    await message.answer("–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:")
    await state.set_state(CreateRec.ask_desc)


@router.message(CreateRec.ask_desc)
async def rec_save(message: Message, state: FSMContext):
    if message.chat.type != "private":
        return  # FSM —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É

    data = await state.get_data()
    type_ = data["rec_type"]
    title = data["title"]
    desc = message.text.strip()

    async with async_session() as db:
        await upsert_user(db, message.from_user.id, message.from_user.username, message.from_user.first_name)
        rec = await add_recommendation(db, message.from_user.id, message.from_user.username, type_, title, desc)

    await message.answer(
        f"‚úÖ –î–æ–¥–∞–Ω–æ!\n\n[{type_.upper()}] {title}\nüë§ @{message.from_user.username}\n\n{desc}\n\n"
        f"–ú–æ–∂–µ—à –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —É –≥—Ä—É–ø—ñ –≤—Ä—É—á–Ω—É –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /get_recs —Ç–∞–º."
    )
    await state.clear()


from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from app.db import async_session
from app.repositories import list_recommendations

router = Router()

# --- –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
@router.message(F.text == "/get_recs")
async def choose_rec_category(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé¨ –§—ñ–ª—å–º–∏", callback_data="recs:movie")],
        [InlineKeyboardButton(text="üì∫ –°–µ—Ä—ñ–∞–ª–∏", callback_data="recs:series")],
        [InlineKeyboardButton(text="üìö –ö–Ω–∏–≥–∏", callback_data="recs:book")],
        [InlineKeyboardButton(text="üéÆ –Ü–≥—Ä–∏", callback_data="recs:game")],
    ])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π:", reply_markup=kb)


# --- –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –ø–æ –æ–±—Ä–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
@router.callback_query(F.data.startswith("recs:"))
async def list_recs_by_category(cb: CallbackQuery):
    type_ = cb.data.split(":")[1]
    async with async_session() as db:
        items = await list_recommendations(db, type_=type_, limit=5)

    icons = {"movie": "üé¨", "series": "üì∫", "book": "üìö", "game": "üéÆ"}
    icon = icons.get(type_, "‚≠êÔ∏è")

    if not items:
        await cb.message.edit_text(f"–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {icon}.")
        return

    text = f"–û—Å—Ç–∞–Ω–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó ({icon}):\n\n"
    for r in items:
        text += f"‚Ä¢ <b>{r.title}</b>\n  üë§ @{r.username or 'anon'}\n  üí¨ {r.description}\n\n"

    await cb.message.edit_text(text, parse_mode="HTML")
